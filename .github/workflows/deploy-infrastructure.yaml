name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths: ['**.tf', '**.tfvars.example']
  pull_request:
    branches: [main]
    paths: ['**.tf', '**.tfvars.example']
  workflow_dispatch:

env:
  TF_VERSION: "1.12.0"
  TF_IN_AUTOMATION: true

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Create Terraform plugin cache directory
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform
      uses: actions/cache@v4.2.3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      has_changes: ${{ steps.plan.outputs.has_changes }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActions

    - name: Create Terraform plugin cache directory
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform
      uses: actions/cache@v4.2.3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        set +e
        terraform plan -detailed-exitcode -no-color -out=tfplan > plan_output.txt 2>&1
        PLAN_EXIT_CODE=$?
        echo "exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
        echo "::notice::Plan exit code: $PLAN_EXIT_CODE"
        
        # Set explicit has_changes output
        if [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
        # Properly escape the output for GitHub Actions
        PLAN_OUTPUT="$(cat plan_output.txt | sed ':a;N;$!ba;s/\n/%0A/g' | sed 's/"/\\"/g')" 
        echo "stdout<<EOF" >> $GITHUB_OUTPUT
        echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        if [ $PLAN_EXIT_CODE -eq 0 ]; then
          echo "✅ No changes needed"
          exit 0
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "📋 Changes detected - plan created successfully"
          exit 0
        else
          echo "❌ Terraform plan failed"
          exit 1
        fi

    - name: Upload Plan
      uses: actions/upload-artifact@v4.6.2
      with:
        name: tfplan
        path: tfplan
        retention-days: 5

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
          );
          
          const output = `#### Terraform Plan 📖
          **Plan Exit Code:** \`${{ steps.plan.outputs.exitcode }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>`;
          
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.plan.outputs.plan-exitcode == '2'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActions

    - name: Download Plan
      uses: actions/download-artifact@v4.3.0
      with:
        name: tfplan

    - name: Create Terraform plugin cache directory
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan